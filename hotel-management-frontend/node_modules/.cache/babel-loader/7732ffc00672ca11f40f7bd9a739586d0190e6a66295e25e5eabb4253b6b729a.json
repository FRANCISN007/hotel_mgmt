{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Documents\\\\MYPROJECT\\\\HOTEL MGMT SYS\\\\hotel-management-frontend\\\\src\\\\pages\\\\authContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// Create a context for authentication\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// AuthProvider component to wrap the app and provide the auth state\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  // Function to log in the user\n  const login = async (username, password) => {\n    try {\n      const response = await fetch('/user/token', {\n        // Replace with your API endpoint\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      const data = await response.json();\n      if (data.access_token) {\n        localStorage.setItem('token', data.access_token);\n        setUser({\n          username\n        });\n        navigate('/dashboard'); // Redirect to dashboard after login\n      } else {\n        alert('Invalid credentials');\n      }\n    } catch (error) {\n      console.error('Login failed', error);\n    }\n  };\n\n  // Function to log out the user\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n    navigate('/login'); // Redirect to login after logout\n  };\n\n  // Automatically check if the user is authenticated on page load\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      // Assuming the token is a JWT token, you can decode and validate it here\n      setUser({\n        username: 'example'\n      }); // Example logic, replace with real token validation\n    }\n    setLoading(false);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the authentication context\n_s(AuthProvider, \"lk6viekuCMMpYORkLYLEq0Wsfds=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useNavigate","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","navigate","login","username","password","response","fetch","method","headers","body","JSON","stringify","data","json","access_token","localStorage","setItem","alert","error","console","logout","removeItem","token","getItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/hp/Documents/MYPROJECT/HOTEL MGMT SYS/hotel-management-frontend/src/pages/authContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// Create a context for authentication\r\nconst AuthContext = createContext();\r\n\r\n// AuthProvider component to wrap the app and provide the auth state\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const navigate = useNavigate();\r\n\r\n  // Function to log in the user\r\n  const login = async (username, password) => {\r\n    try {\r\n      const response = await fetch('/user/token', {  // Replace with your API endpoint\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ username, password }),\r\n      });\r\n      const data = await response.json();\r\n\r\n      if (data.access_token) {\r\n        localStorage.setItem('token', data.access_token);\r\n        setUser({ username });\r\n        navigate('/dashboard'); // Redirect to dashboard after login\r\n      } else {\r\n        alert('Invalid credentials');\r\n      }\r\n    } catch (error) {\r\n      console.error('Login failed', error);\r\n    }\r\n  };\r\n\r\n  // Function to log out the user\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    setUser(null);\r\n    navigate('/login'); // Redirect to login after logout\r\n  };\r\n\r\n  // Automatically check if the user is authenticated on page load\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      // Assuming the token is a JWT token, you can decode and validate it here\r\n      setUser({ username: 'example' }); // Example logic, replace with real token validation\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, logout, loading }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use the authentication context\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,WAAW,QAAQ,kBAAkB;;AAE9C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAMc,QAAQ,GAAGX,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMY,KAAK,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;IAC1C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAa,EAAE;QAAG;QAC7CC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER,QAAQ;UAAEC;QAAS,CAAC;MAC7C,CAAC,CAAC;MACF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAElC,IAAID,IAAI,CAACE,YAAY,EAAE;QACrBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,IAAI,CAACE,YAAY,CAAC;QAChDhB,OAAO,CAAC;UAAEK;QAAS,CAAC,CAAC;QACrBF,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;MAC1B,CAAC,MAAM;QACLgB,KAAK,CAAC,qBAAqB,CAAC;MAC9B;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACtC;EACF,CAAC;;EAED;EACA,MAAME,MAAM,GAAGA,CAAA,KAAM;IACnBL,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC;IAChCvB,OAAO,CAAC,IAAI,CAAC;IACbG,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;EACtB,CAAC;;EAED;EACAZ,SAAS,CAAC,MAAM;IACd,MAAMiC,KAAK,GAAGP,YAAY,CAACQ,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAID,KAAK,EAAE;MACT;MACAxB,OAAO,CAAC;QAAEK,QAAQ,EAAE;MAAU,CAAC,CAAC,CAAC,CAAC;IACpC;IACAH,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACER,OAAA,CAACC,WAAW,CAAC+B,QAAQ;IAACC,KAAK,EAAE;MAAE5B,IAAI;MAAEK,KAAK;MAAEkB,MAAM;MAAErB;IAAQ,CAAE;IAAAJ,QAAA,EAC3DA;EAAQ;IAAA+B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAAjC,EAAA,CAnDaF,YAAY;EAAA,QAGNJ,WAAW;AAAA;AAAAwC,EAAA,GAHjBpC,YAAY;AAoDzB,OAAO,MAAMqC,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,OAAO5C,UAAU,CAACK,WAAW,CAAC;AAChC,CAAC;AAACuC,GAAA,CAFWD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
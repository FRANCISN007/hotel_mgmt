HOTEL MGMT SYS/
│
├── app/                      # Backend (FastAPI application)
│   ├── __init__.py
│   ├── main.py
│   ├── database.py
│   ├── users/
│   │   ├── __init__.py
│   │   ├── router.py
│   │   ├── auth.py
│   │   ├── models.py
│   │   ├── schemas.py
│   ├── rooms/
│   │   ├── __init__.py
│   │   ├── router.py
│   │   ├── models.py
│   │   ├── schemas.py
│   ├── bookings/
│   │   ├── __init__.py
│   │   ├── router.py
│   │   ├── models.py
│   │   ├── schemas.py
│   ├── payments/
│   │   ├── __init__.py
│   │   ├── router.py
│   │   ├── models.py
│   │   ├── schemas.py
│
├
│
├── env/                      # Python virtual environment
│
├── .gitignore
├── requirements.txt          # Python dependencies
├── README.md



docker build -t hotel-management-system .
docker run -p 8000:8000 hotel-management-system



hotel-management-frontend/
├── src/
│   ├── api/
│   │   ├── users.js       # API functions for users
│   │   ├── rooms.js       # API functions for rooms
│   │   ├── bookings.js    # API functions for bookings
│   │   └── payments.js    # API functions for payments
│   ├── components/
│   │   ├── Users/
│   │   │   ├── Login.jsx
│   │   │   ├── Register.jsx
│   │   │   └── UsersList.jsx
│   │   ├── Rooms/
│   │   ├── Bookings/
│   │   └── Payments/
│   ├── App.js
│   ├── index.js
│   └── styles.css
├── .env                # Environment variables
├── package.json
└── README.md



Run the following command to create a new React app:
npx create-react-app hotel-management-frontend

Navigate to your project folder:
cd hotel-management-frontend

Install required dependencies (e.g., Axios for API requests):
npm install axios


hotel-management-frontend/
│
├── public/                 # Static files like index.html, images, etc.
│   └── index.html
│
├── src/                    # Source files for the React app
│   ├── assets/             # Images, fonts, styles
│   ├── components/         # Reusable UI components (e.g., buttons, form inputs)
│   ├── contexts/           # React context for state management (e.g., auth context)
│   │   └── authContext.js  # Auth context to manage authentication state
│   ├── pages/              # Pages like Login, Dashboard, etc.
│   │   ├── LoginPage.js    # Login page component
│   │   └── DashboardPage.js # Dashboard page component
│   ├── App.js              # Main App component where routes and context are provided
│   ├── index.js            # Entry point for React app, renders App component
│   └── styles/             # Global styles
│       └── main.css        # Base CSS file for the app
│
└── package.json            # Project dependencies and scripts



1. check out endpoint does not actually require the guest name because all the entry are done that day
2. the check out list and reservation list should be "check in History and Reservation History


@router.get("/", response_model=list[dict])
def list_rooms(db: Session = Depends(get_db)):
    # Query all rooms from the Room table
    all_rooms = db.query(room_models.Room).all()
    
    # Query all reservations
    reservations = db.query(reservation_models.Reservation).all()
    
    # Query all check-ins
    check_ins = db.query(check_in_models.Check_in).all()

    # Prepare the combined result
    result = []

    # Add all rooms with their current status
    for room in all_rooms:
        result.append({
            "room_number": room.room_number,
            "room_type": room.room_type,
            "amount": room.amount,
            "status": room.status,
        })

    # Add all reservations with arrival and departure dates
    for reservation in reservations:
        result.append({
            "room_number": reservation.room_number,
            "status": "reserved",
            "arrival_date": reservation.arrival_date,
            "departure_date": reservation.departure_date,
        })

    # Add all check-ins with arrival and departure dates
    for check_in in check_ins:
        result.append({
            "room_number": check_in.room_number,
            "status": "checked-in",
            "arrival_date": check_in.arrival_date,
            "departure_date": check_in.departure_date,
        })

    return result




@router.get("/available")
def list_available_rooms(db: Session = Depends(get_db)):
    available_rooms = db.query(models.Room).filter(models.Room.status == "available").all()
    total_available_rooms = len(available_rooms)

    if total_available_rooms == 0:
        return {
            "message": "We are fully booked!",
            "total_available_rooms": 0,
            "available_rooms": []
        }

    return {
        "total_available_rooms": total_available_rooms,
        "available_rooms": available_rooms
    }

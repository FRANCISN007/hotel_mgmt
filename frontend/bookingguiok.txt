import tkinter as tk
from tkinter import ttk, messagebox
from tkcalendar import DateEntry
import requests

# Backend API URL
API_URL = "http://127.0.0.1:8000/bookings"

class BookingManagement:
    def __init__(self, root, token):  
        self.token = token
        
        # Create a new window (Toplevel)
        self.window = tk.Toplevel(root)
        self.window.title("Booking Management")
        self.window.geometry("800x600")  # Standard window size
        self.window.resizable(False, False)  # Prevent resizing for consistency
        
        # Create a frame for layout
        self.frame = ttk.Frame(self.window, padding=10)
        self.frame.pack(fill="both", expand=True)

        # Labels & Entry Fields
        ttk.Label(self.frame, text="Room Number:").grid(row=0, column=0, padx=10, pady=5, sticky="w")
        self.room_number_entry = ttk.Entry(self.frame)
        self.room_number_entry.grid(row=0, column=1, padx=10, pady=5, sticky="w")

        ttk.Label(self.frame, text="Guest Name:").grid(row=1, column=0, padx=10, pady=5, sticky="w")
        self.guest_name_entry = ttk.Entry(self.frame)
        self.guest_name_entry.grid(row=1, column=1, padx=10, pady=5, sticky="w")

        ttk.Label(self.frame, text="Arrival Date:").grid(row=2, column=0, padx=10, pady=5, sticky="w")
        self.arrival_date_entry = DateEntry(self.frame, width=12, background='darkblue', foreground='white', borderwidth=2)
        self.arrival_date_entry.grid(row=2, column=1, padx=10, pady=5, sticky="w")

        ttk.Label(self.frame, text="Departure Date:").grid(row=3, column=0, padx=10, pady=5, sticky="w")
        self.departure_date_entry = DateEntry(self.frame, width=12, background='darkblue', foreground='white', borderwidth=2)
        self.departure_date_entry.grid(row=3, column=1, padx=10, pady=5, sticky="w")

        ttk.Label(self.frame, text="Phone Number:").grid(row=4, column=0, padx=10, pady=5, sticky="w")
        self.phone_number_entry = ttk.Entry(self.frame)
        self.phone_number_entry.grid(row=4, column=1, padx=10, pady=5, sticky="w")

        # Booking Type Dropdown
        ttk.Label(self.frame, text="Booking Type:").grid(row=5, column=0, padx=10, pady=5, sticky="w")
        self.booking_type_var = tk.StringVar()
        self.booking_type_dropdown = ttk.Combobox(self.frame, textvariable=self.booking_type_var, values=["Checked-in", "Reservation"], state="readonly")
        self.booking_type_dropdown.grid(row=5, column=1, padx=10, pady=5, sticky="w")

        # Buttons
        self.create_btn = ttk.Button(self.frame, text="Create Booking", command=self.create_booking)
        self.create_btn.grid(row=6, column=0, columnspan=2, pady=10)

        self.view_btn = ttk.Button(self.frame, text="View All Bookings", command=self.view_bookings)
        self.view_btn.grid(row=7, column=0, columnspan=2, pady=5)

        # Treeview for displaying bookings
        self.tree_frame = ttk.Frame(self.window)
        self.tree_frame.pack(pady=10, padx=10, fill="both", expand=True)

        self.tree = ttk.Treeview(self.tree_frame, columns=("id", "room_number", "guest_name", "status"), show="headings", height=10)
        self.tree.heading("id", text="ID")
        self.tree.heading("room_number", text="Room Number")
        self.tree.heading("guest_name", text="Guest Name")
        self.tree.heading("status", text="Status")

        self.tree.column("id", width=50, anchor="center")
        self.tree.column("room_number", width=100, anchor="center")
        self.tree.column("guest_name", width=200, anchor="w")
        self.tree.column("status", width=100, anchor="center")

        self.tree.pack(fill="both", expand=True)

    def create_booking(self):
        data = {
            "room_number": self.room_number_entry.get(),
            "guest_name": self.guest_name_entry.get(),
            "arrival_date": self.arrival_date_entry.get_date().isoformat(),
            "departure_date": self.departure_date_entry.get_date().isoformat(),
            "phone_number": self.phone_number_entry.get(),
            "booking_type": self.booking_type_var.get(),
        }
        headers = {"Authorization": f"Bearer {self.token}"}
        response = requests.post(f"{API_URL}/create/", json=data, headers=headers)
        if response.status_code == 200:
            messagebox.showinfo("Success", "Booking created successfully!")
        else:
            messagebox.showerror("Error", response.json().get("detail", "Failed to create booking"))

    def view_bookings(self):
        headers = {"Authorization": f"Bearer {self.token}"}
        response = requests.get(API_URL, headers=headers)
        if response.status_code == 200:
            for row in self.tree.get_children():
                self.tree.delete(row)
            bookings = response.json()
            for booking in bookings:
                self.tree.insert("", "end", values=(booking["id"], booking["room_number"], booking["guest_name"], booking["status"]))
        else:
            messagebox.showerror("Error", "Failed to fetch bookings")





 import tkinter as tk
from tkinter import ttk, messagebox
from tkcalendar import DateEntry  # Import for date picker
import requests

class BookingManagement:
    def __init__(self, root, token):
        self.root = tk.Toplevel(root)
        self.root.title("Booking Management")
        self.root.geometry("700x500")
        self.token = token
        self.root.configure(bg="#f0f0f0")

        # Header Section
        self.header_frame = tk.Frame(self.root, bg="#A0A0A0", height=50)
        self.header_frame.pack(fill=tk.X)

        self.header_label = tk.Label(self.header_frame, text="Booking Management", 
                                     fg="white", bg="#A0A0A0", font=("Helvetica", 16, "bold"))
        self.header_label.pack(pady=10)

        # Booking Form
        self.form_frame = tk.Frame(self.root, bg="#ffffff", padx=20, pady=20)
        self.form_frame.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

        # Labels & Entry Fields
        fields = [
            ("Room Number:", "room_number"),
            ("Guest Name:", "guest_name"),
            ("Phone Number:", "phone_number"),
            ("Arrival Date:", "arrival_date"),
            ("Departure Date:", "departure_date"),
            ("Booking Type:", "booking_type"),
        ]

        self.entries = {}

        for idx, (label, key) in enumerate(fields):
            tk.Label(self.form_frame, text=label, bg="#ffffff", font=("Arial", 10)).grid(row=idx, column=0, sticky="w", pady=5)

            if key == "booking_type":
                self.entries[key] = ttk.Combobox(self.form_frame, values=["Checked-in", "Reservation"], state="readonly")
                self.entries[key].current(0)  # Default selection
            elif key in ["arrival_date", "departure_date"]:
                self.entries[key] = DateEntry(self.form_frame, date_pattern="yyyy-mm-dd")  # Date Picker
            else:
                self.entries[key] = tk.Entry(self.form_frame, font=("Arial", 10))

            self.entries[key].grid(row=idx, column=1, padx=10, pady=5, ipadx=10, ipady=2)

        # Submit Button
        self.submit_button = ttk.Button(self.form_frame, text="Submit", command=self.submit_booking)
        self.submit_button.grid(row=len(fields), column=1, pady=20)

    def submit_booking(self):
        """Collects form data and sends a request to create a booking."""
        booking_data = {
            "room_number": self.entries["room_number"].get(),
            "guest_name": self.entries["guest_name"].get(),
            "phone_number": self.entries["phone_number"].get(),
            "arrival_date": self.entries["arrival_date"].get(),
            "departure_date": self.entries["departure_date"].get(),
            "booking_type": self.entries["booking_type"].get(),
        }

        if not all(booking_data.values()):  # Ensure all fields are filled
            messagebox.showerror("Error", "Please fill in all fields")
            return

        api_url = "http://127.0.0.1:8000/bookings/create/"  # Adjust if needed
        headers = {"Authorization": f"Bearer {self.token}", "Content-Type": "application/json"}

        try:
            response = requests.post(api_url, json=booking_data, headers=headers)
            if response.status_code == 200:
                messagebox.showinfo("Success", "Booking created successfully!")
            else:
                messagebox.showerror("Error", response.json().get("detail", "Booking failed."))
        except requests.exceptions.RequestException as e:
            messagebox.showerror("Error", f"Request failed: {e}")

# Test Window
if __name__ == "__main__":
    root = tk.Tk()
    BookingManagement(root, token="dummy_token")
    root.mainloop()
          


import tkinter as tk
from tkinter import ttk, messagebox
from tkcalendar import DateEntry  # Import DateEntry for date selection
import requests

class BookingManagement:
    def __init__(self, root, token):
        self.root = tk.Toplevel(root)
        self.root.title("Booking Management")
        self.root.geometry("900x600")
        self.token = token
        self.root.configure(bg="#f0f0f0")

        # Header Section
        self.header_frame = tk.Frame(self.root, bg="#A0A0A0", height=50)
        self.header_frame.pack(fill=tk.X)

        self.header_label = tk.Label(self.header_frame, text="Booking Management", 
                                     fg="white", bg="#A0A0A0", font=("Helvetica", 16, "bold"))
        self.header_label.pack(pady=10)

        # Sidebar Section
        self.left_frame = tk.Frame(self.root, bg="#A0A0A0", width=200)
        self.left_frame.pack(side=tk.LEFT, fill=tk.Y, padx=10, pady=10)

        self.right_frame = tk.Frame(self.root, bg="#ffffff", width=700)
        self.right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=10, pady=10)

        # Subheading for dynamic section title
        self.subheading_label = tk.Label(self.right_frame, text="Select an option", 
                                         font=("Helvetica", 12, "bold"), fg="#606060", bg="#ffffff")
        self.subheading_label.pack(pady=10)

        # Booking action buttons
        buttons = [
            ("Create Booking", self.create_booking),
            #("Complimentary Booking", self.complimentary_booking),
            ("List Bookings", self.list_bookings),
            ("List By Status", self.list_by_status),
            ("Search Booking", self.search_booking),
            ("List By ID", self.list_by_id),
            ("List By Room", self.list_by_room),
            ("Update Booking", self.update_booking),
            ("Guest Checkout", self.guest_checkout),
            ("Cancel Booking", self.cancel_booking),
        ]

        for text, command in buttons:
            btn = ttk.Button(self.left_frame, text=text, command=lambda t=text, c=command: self.update_subheading(t, c),
                             width=25, style="Bold.TButton")
            btn.pack(pady=5, padx=10, anchor="w")

        # Configure button styles
        style = ttk.Style()
        style.configure("Bold.TButton", font=("Helvetica", 10, "bold"))

    def update_subheading(self, text, command):
        self.subheading_label.config(text=text)
        command()

    def create_booking(self):
        self.clear_right_frame()
        frame = tk.Frame(self.right_frame, bg="#ffffff", padx=20, pady=20)
        frame.pack(fill=tk.BOTH, expand=True)

        tk.Label(frame, text="Create Booking Form", font=("Arial", 14, "bold"), bg="#ffffff").grid(row=0, columnspan=2, pady=10)

        # Labels & Entry fields
        fields = [
            ("Room Number", tk.Entry),
            ("Guest Name", tk.Entry),
            ("Phone Number", tk.Entry),
            ("Booking Type", ttk.Combobox),
            ("Arrival Date", DateEntry),
            ("Departure Date", DateEntry),
        ]

        self.entries = {}
        for i, (label, field_type) in enumerate(fields):
            tk.Label(frame, text=label, font=("Arial", 11), bg="#ffffff").grid(row=i+1, column=0, sticky="w", pady=5)
            if field_type == ttk.Combobox:
                entry = field_type(frame, values=["Checked-in", "Reservation", "Complimentary"], state="readonly", font=("Arial", 11))
            elif field_type == DateEntry:
                entry = field_type(frame, font=("Arial", 11), width=12, background='darkblue', foreground='white', borderwidth=2)
            else:
                entry = field_type(frame, font=("Arial", 11), width=25)
            entry.grid(row=i+1, column=1, padx=10, pady=5)
            self.entries[label] = entry

        # Submit Button
        submit_btn = ttk.Button(frame, text="Submit Booking", command=self.submit_booking, style="Bold.TButton")
        submit_btn.grid(row=len(fields)+1, columnspan=2, pady=10)

    def submit_booking(self):
        """Collects form data and sends a request to create a booking."""
        try:
            booking_data = {
                "room_number": self.entries["Room Number"].get(),
                "guest_name": self.entries["Guest Name"].get(),
                "phone_number": self.entries["Phone Number"].get(),
                "arrival_date": self.entries["Arrival Date"].get_date().strftime("%Y-%m-%d"),
                "departure_date": self.entries["Departure Date"].get_date().strftime("%Y-%m-%d"),
                "booking_type": self.entries["Booking Type"].get(),
            }

            if not all(booking_data.values()):  # Ensure all fields are filled
                messagebox.showerror("Error", "Please fill in all fields")
                return

            api_url = "http://127.0.0.1:8000/bookings/create/"  # Adjust if needed
            headers = {"Authorization": f"Bearer {self.token}", "Content-Type": "application/json"}

            response = requests.post(api_url, json=booking_data, headers=headers)

            if response.status_code == 200:
                messagebox.showinfo("Success", "Booking created successfully!")
            else:
                messagebox.showerror("Error", response.json().get("detail", "Booking failed."))

        except KeyError as e:
            messagebox.showerror("Error", f"Missing entry field: {e}")
        except requests.exceptions.RequestException as e:
            messagebox.showerror("Error", f"Request failed: {e}")

    
    def list_bookings(self):
        self.clear_right_frame()
        frame = tk.Frame(self.right_frame, bg="#ffffff", padx=10, pady=10)
        frame.pack(fill=tk.BOTH, expand=True)

        tk.Label(frame, text="List Bookings", font=("Arial", 14, "bold"), bg="#ffffff").grid(row=0, columnspan=3, pady=10)
        
        tk.Label(frame, text="Start Date:", font=("Arial", 11), bg="#ffffff").grid(row=1, column=0, padx=5, pady=5)
        self.start_date = DateEntry(frame, font=("Arial", 11))
        self.start_date.grid(row=1, column=1, padx=5, pady=5)
        
        tk.Label(frame, text="End Date:", font=("Arial", 11), bg="#ffffff").grid(row=1, column=2, padx=5, pady=5)
        self.end_date = DateEntry(frame, font=("Arial", 11))
        self.end_date.grid(row=1, column=3, padx=5, pady=5)

        fetch_btn = ttk.Button(
            frame,
            text="Fetch Bookings",
            command=lambda: self.fetch_bookings(self.start_date, self.end_date)
        )
        fetch_btn.grid(row=0, column=4, padx=10, pady=5)


        self.tree = ttk.Treeview(frame, columns=("ID", "Room", "Guest", "Room_Price", "Arrival", "Departure", "Status", "Number_of_days", "Booking_cost", "Booking_Type", "Phone_Number", "Payment_Status", "Booking_Date", "Cancellation_Reason"), show="headings")
        self.tree.heading("ID", text="ID")
        self.tree.heading("Room", text="Room Number")
        self.tree.heading("Guest", text="Guest Name")
        self.tree.heading("Room_Price", text="room_price")
        self.tree.heading("Arrival", text="Arrival Date")
        self.tree.heading("Departure", text="Departure Date")
        self.tree.heading("Status", text="Status")
        self.tree.heading("Number_of_days", text="number_of_days")
        self.tree.heading("Booking_cost", text="booking_cost")
        self.tree.heading("Booking_Type", text="booking_type")
        self.tree.heading("Phone_Number", text="phone_number")
        self.tree.heading("Payment_Status", text="payment_status")
        self.tree.heading("Booking_Date", text="booking_date")
        self.tree.heading("Cancellation_Reason", text="cancellation_reason")            
                
                
                    
        
        
        
        self.tree.pack(fill=tk.BOTH, expand=True, pady=10)
            
    def fetch_bookings(self, start_date_entry, end_date_entry):
        """Fetch bookings from the API and populate the table."""
        api_url = "http://127.0.0.1:8000/bookings/list"  # Ensure correct endpoint
        params = {
            "start_date": start_date_entry.get_date().strftime("%Y-%m-%d"),
            "end_date": end_date_entry.get_date().strftime("%Y-%m-%d"),
        }
        headers = {"Authorization": f"Bearer {self.token}"}

        try:
            response = requests.get(api_url, params=params, headers=headers)
            if response.status_code == 200:
                data = response.json()
                print("API Response:", data)  # Debugging output
                if isinstance(data, dict) and "bookings" in data:
                    bookings = data["bookings"]
                elif isinstance(data, list):
                    bookings = data
                else:
                    messagebox.showerror("Error", "Unexpected API response format")
                    return

                self.tree.delete(*self.tree.get_children())  # Clear table
                for booking in bookings:
                    self.tree.insert("", "end", values=(
                    booking.get("id", ""),
                    booking.get("room_number", ""),
                    booking.get("guest_name", ""),
                    booking.get("room_price", ""),
                    booking.get("arrival_date", ""),
                    booking.get("departure_date", ""),
                    booking.get("number_of_days", ""),
                    booking.get("booking_cost", ""),
                    booking.get("booking_type", ""),
                    booking.get("phone_number", ""),
                    booking.get("status", ""),
                    booking.get("payment_status", ""),
                    booking.get("booking_date", ""),
                    booking.get("cancellation_reason", ""),
                ))
            else:
                messagebox.showerror("Error", response.json().get("detail", "Failed to retrieve bookings."))
        except requests.exceptions.RequestException as e:
            messagebox.showerror("Error", f"Request failed: {e}")

            
            
            
            

    #def complimentary_booking(self):
        messagebox.showinfo("Info", "Complimentary Booking Selected")
    
    #def list_bookings(self):
        #messagebox.showinfo("Info", "List Bookings Selected")
    
    def list_by_status(self):
        messagebox.showinfo("Info", "List By Status Selected")
    
    def search_booking(self):
        messagebox.showinfo("Info", "Search Booking Selected")
    
    def list_by_id(self):
        messagebox.showinfo("Info", "List By ID Selected")
    
    def list_by_room(self):
        messagebox.showinfo("Info", "List By Room Selected")
    
    def update_booking(self):
        messagebox.showinfo("Info", "Update Booking Selected")
    
    def guest_checkout(self):
        messagebox.showinfo("Info", "Guest Checkout Selected")
    
    def cancel_booking(self):
        messagebox.showinfo("Info", "Cancel Booking Selected")
    
    def clear_right_frame(self):
        for widget in self.right_frame.winfo_children():
            widget.pack_forget()

if __name__ == "__main__":
    root = tk.Tk()
    BookingManagement(root, token="dummy_token")
    root.mainloop()

